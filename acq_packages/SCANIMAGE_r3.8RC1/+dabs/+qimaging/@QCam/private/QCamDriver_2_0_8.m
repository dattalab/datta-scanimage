function [methodinfo,structs,enuminfo,ThunkLibName]=QCamDriverM
%QCAMDRIVERM Create structures to define interfaces found in 'QCamApi_2_0_8'.

%This function was generated by loadlibrary.m parser version 1.1.6.32 on Tue May  4 15:02:24 2010
%perl options:'QCamApi_2_0_8.i -outfile=QCamDriverM.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% extern QCam_Err _stdcall QCam_LoadDriver ( void ); 
fcns.name{fcnNum}='QCam_LoadDriver'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern void _stdcall QCam_ReleaseDriver ( void ); 
fcns.name{fcnNum}='QCam_ReleaseDriver'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_LibVersion ( unsigned short * verMajor , unsigned short * verMinor , unsigned short * verBuild ); 
fcns.name{fcnNum}='QCam_LibVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_Version ( unsigned short * verMajor , unsigned short * verMinor ); 
fcns.name{fcnNum}='QCam_Version'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_ListCameras ( QCam_CamListItem * pList , unsigned long * pNumberInList ); 
fcns.name{fcnNum}='QCam_ListCameras'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_CamListItemPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_OpenCamera ( unsigned long cameraId , QCam_Handle * pHandle ); 
fcns.name{fcnNum}='QCam_OpenCamera'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_CloseCamera ( QCam_Handle handle ); 
fcns.name{fcnNum}='QCam_CloseCamera'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_RegisterUnpluggedCallback ( QCam_Handle handle , QCam_AsyncCallback callback , void * usrPtr ); 
fcns.name{fcnNum}='QCam_RegisterUnpluggedCallback'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetSerialString ( QCam_Handle handle , char * string , unsigned long size ); 
fcns.name{fcnNum}='QCam_GetSerialString'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetCameraModelString ( QCam_Handle handle , char * string , unsigned long size ); 
fcns.name{fcnNum}='QCam_GetCameraModelString'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetInfo ( QCam_Handle handle , QCam_Info infoKey , unsigned long * pValue ); 
fcns.name{fcnNum}='QCam_GetInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_Info', 'ulongPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_ReadDefaultSettings ( QCam_Handle handle , QCam_Settings * pSettings ); 
fcns.name{fcnNum}='QCam_ReadDefaultSettings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_SettingsPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_ReadSettingsFromCam ( QCam_Handle handle , QCam_Settings * pSettings ); 
fcns.name{fcnNum}='QCam_ReadSettingsFromCam'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_SettingsPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_SendSettingsToCam ( QCam_Handle handle , QCam_Settings * pSettings ); 
fcns.name{fcnNum}='QCam_SendSettingsToCam'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_SettingsPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_PreflightSettings ( QCam_Handle handle , QCam_Settings * pSettings ); 
fcns.name{fcnNum}='QCam_PreflightSettings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_SettingsPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_TranslateSettings ( QCam_Handle handle , QCam_Settings * pSettings ); 
fcns.name{fcnNum}='QCam_TranslateSettings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_SettingsPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParam ( QCam_Settings const * pSettings , QCam_Param paramKey , unsigned long * pValue ); 
fcns.name{fcnNum}='QCam_GetParam'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param', 'ulongPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamS32 ( QCam_Settings const * pSettings , QCam_ParamS32 paramKey , signed long * pValue ); 
fcns.name{fcnNum}='QCam_GetParamS32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_ParamS32', 'longPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParam64 ( QCam_Settings const * pSettings , QCam_Param64 paramKey , unsigned long long * pValue ); 
fcns.name{fcnNum}='QCam_GetParam64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param64', 'uint64Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_SetParam ( QCam_Settings * pSettings , QCam_Param paramKey , unsigned long value ); 
fcns.name{fcnNum}='QCam_SetParam'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_SetParamS32 ( QCam_Settings * pSettings , QCam_ParamS32 paramKey , signed long value ); 
fcns.name{fcnNum}='QCam_SetParamS32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_ParamS32', 'long'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_SetParam64 ( QCam_Settings * pSettings , QCam_Param64 paramKey , unsigned long long value ); 
fcns.name{fcnNum}='QCam_SetParam64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param64', 'uint64'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamMin ( QCam_Settings const * pSettings , QCam_Param paramKey , unsigned long * pValue ); 
fcns.name{fcnNum}='QCam_GetParamMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param', 'ulongPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamS32Min ( QCam_Settings const * pSettings , QCam_ParamS32 paramKey , signed long * pValue ); 
fcns.name{fcnNum}='QCam_GetParamS32Min'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_ParamS32', 'longPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParam64Min ( QCam_Settings const * pSettings , QCam_Param64 paramKey , unsigned long long * pValue ); 
fcns.name{fcnNum}='QCam_GetParam64Min'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param64', 'uint64Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamMax ( QCam_Settings const * pSettings , QCam_Param paramKey , unsigned long * pValue ); 
fcns.name{fcnNum}='QCam_GetParamMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param', 'ulongPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamS32Max ( QCam_Settings const * pSettings , QCam_ParamS32 paramKey , signed long * pValue ); 
fcns.name{fcnNum}='QCam_GetParamS32Max'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_ParamS32', 'longPtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParam64Max ( QCam_Settings const * pSettings , QCam_Param64 paramKey , unsigned long long * pValue ); 
fcns.name{fcnNum}='QCam_GetParam64Max'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param64', 'uint64Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamSparseTable ( QCam_Settings const * pSettings , QCam_Param paramKey , unsigned long * pSparseTable , int * uSize ); 
fcns.name{fcnNum}='QCam_GetParamSparseTable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param', 'ulongPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamSparseTableS32 ( QCam_Settings const * pSettings , QCam_ParamS32 paramKey , signed long * pSparseTable , int * uSize ); 
fcns.name{fcnNum}='QCam_GetParamSparseTableS32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_ParamS32', 'longPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GetParamSparseTable64 ( QCam_Settings const * pSettings , QCam_Param64 paramKey , unsigned long long * pSparseTable , int * uSize ); 
fcns.name{fcnNum}='QCam_GetParamSparseTable64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param64', 'uint64Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsSparseTable ( QCam_Settings const * pSettings , QCam_Param paramKey ); 
fcns.name{fcnNum}='QCam_IsSparseTable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsSparseTableS32 ( QCam_Settings const * pSettings , QCam_ParamS32 paramKey ); 
fcns.name{fcnNum}='QCam_IsSparseTableS32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_ParamS32'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsSparseTable64 ( QCam_Settings const * pSettings , QCam_Param64 paramKey ); 
fcns.name{fcnNum}='QCam_IsSparseTable64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param64'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsRangeTable ( QCam_Settings const * pSettings , QCam_Param paramKey ); 
fcns.name{fcnNum}='QCam_IsRangeTable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsRangeTableS32 ( QCam_Settings const * pSettings , QCam_ParamS32 paramKey ); 
fcns.name{fcnNum}='QCam_IsRangeTableS32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_ParamS32'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsRangeTable64 ( QCam_Settings const * pSettings , QCam_Param64 paramKey ); 
fcns.name{fcnNum}='QCam_IsRangeTable64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'QCam_Param64'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsParamSupported ( QCam_Handle handle , QCam_Param paramKey ); 
fcns.name{fcnNum}='QCam_IsParamSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_Param'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsParamS32Supported ( QCam_Handle handle , QCam_ParamS32 paramKey ); 
fcns.name{fcnNum}='QCam_IsParamS32Supported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_ParamS32'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_IsParam64Supported ( QCam_Handle handle , QCam_Param64 paramKey ); 
fcns.name{fcnNum}='QCam_IsParam64Supported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_Param64'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_SetStreaming ( QCam_Handle handle , unsigned long enable ); 
fcns.name{fcnNum}='QCam_SetStreaming'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_Trigger ( QCam_Handle handle ); 
fcns.name{fcnNum}='QCam_Trigger'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_Abort ( QCam_Handle handle ); 
fcns.name{fcnNum}='QCam_Abort'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_GrabFrame ( QCam_Handle handle , QCam_Frame * pFrame ); 
fcns.name{fcnNum}='QCam_GrabFrame'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_FramePtr'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_QueueFrame ( QCam_Handle handle , QCam_Frame * pFrame , QCam_AsyncCallback callback , unsigned long cbFlags , void * userPtr , unsigned long userData ); 
fcns.name{fcnNum}='QCam_QueueFrame'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_FramePtr', 'FcnPtr', 'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_QueueSettings ( QCam_Handle handle , QCam_Settings * pSettings , QCam_AsyncCallback callback , unsigned long cbFlags , void * userPtr , unsigned long userData ); 
fcns.name{fcnNum}='QCam_QueueSettings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_SettingsPtr', 'FcnPtr', 'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_AutoExpose ( QCam_Settings * pOpaque , unsigned long xOrig , unsigned long yOrig , unsigned long width , unsigned long height ); 
fcns.name{fcnNum}='QCam_AutoExpose'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_WhiteBalance ( QCam_Settings * pOpaque , unsigned long xOrig , unsigned long yOrig , unsigned long width , unsigned long height ); 
fcns.name{fcnNum}='QCam_WhiteBalance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'QCam_SettingsPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% extern QCam_Err _stdcall QCam_PostProcessSingleFrame ( QCam_Handle inHandle , QCam_Settings * inSettings , QCam_Frame * inFrame , QCam_Frame * outFrame ); 
fcns.name{fcnNum}='QCam_PostProcessSingleFrame'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='QCam_Err'; fcns.RHS{fcnNum}={'ulong', 'QCam_SettingsPtr', 'QCam_FramePtr', 'QCam_FramePtr'};fcnNum=fcnNum+1;
structs.QCam_Settings.members=struct('size', 'ulong', 'm_private_data', 'ulong#64');
structs.QCam_CamListItem.members=struct('cameraId', 'ulong', 'cameraType', 'ulong', 'uniqueId', 'ulong', 'isOpen', 'ulong', 'm_reserved', 'ulong#10');
structs.QCam_Frame.members=struct('pBuffer', 'voidPtr', 'bufferSize', 'ulong', 'format', 'ulong', 'width', 'ulong', 'height', 'ulong', 'size', 'ulong', 'bits', 'uint16', 'frameNumber', 'uint16', 'bayerPattern', 'ulong', 'errorCode', 'ulong', 'timeStamp', 'ulong', 'm_reserved', 'ulong#8');
enuminfo.QCam_qcShutterControl=struct('qcShutterAuto',0,'qcShutterClose',1,'qcShutterOpen',2,'qcShutter_last',3);
enuminfo.QCam_ImageFormat=struct('qfmtRaw8',0,'qfmtRaw16',1,'qfmtMono8',2,'qfmtMono16',3,'qfmtBayer8',4,'qfmtBayer16',5,'qfmtRgbPlane8',6,'qfmtRgbPlane16',7,'qfmtBgr24',8,'qfmtXrgb32',9,'qfmtRgb48',10,'qfmtBgrx32',11,'qfmtRgb24',12,'qfmt_last',13);
enuminfo.QCam_qcTriggerType=struct('qcTriggerNone',0,'qcTriggerFreerun',0,'qcTriggerEdgeHi',1,'qcTriggerEdgeLow',2,'qcTriggerPulseHi',3,'qcTriggerPulseLow',4,'qcTriggerSoftware',5,'qcTriggerStrobeHi',6,'qcTriggerStrobeLow',7,'qcTrigger_last',8);
enuminfo.QCam_Param64=struct('qprm64Exposure',0,'qprm64ExposureRed',1,'qprm64ExposureBlue',2,'qprm64NormIntensGain',3,'qprm64_last',4,'qprm64_force32',4294967295);
enuminfo.QCam_Err=struct('qerrSuccess',0,'qerrNotSupported',1,'qerrInvalidValue',2,'qerrBadSettings',3,'qerrNoUserDriver',4,'qerrNoFirewireDriver',5,'qerrDriverConnection',6,'qerrDriverAlreadyLoaded',7,'qerrDriverNotLoaded',8,'qerrInvalidHandle',9,'qerrUnknownCamera',10,'qerrInvalidCameraId',11,'qerrNoMoreConnections',12,'qerrHardwareFault',13,'qerrFirewireFault',14,'qerrCameraFault',15,'qerrDriverFault',16,'qerrInvalidFrameIndex',17,'qerrBufferTooSmall',18,'qerrOutOfMemory',19,'qerrOutOfSharedMemory',20,'qerrBusy',21,'qerrQueueFull',22,'qerrCancelled',23,'qerrNotStreaming',24,'qerrLostSync',25,'qerrBlackFill',26,'qerrFirewireOverflow',27,'qerrUnplugged',28,'qerrAccessDenied',29,'qerrStreamFault',30,'qerrQCamUpdateNeeded',31,'qerrRoiTooSmall',32,'qerr_last',33,'qerr_force32',4294967295);
enuminfo.QCam_qcFanSpeed=struct('qcFanSpeedLow',1,'qcFanSpeedMedium',2,'qcFanSpeedHigh',3,'qcFanSpeedFull',4);
enuminfo.QCam_qcCameraType=struct('qcCameraUnknown',0,'qcCameraMi2',1,'qcCameraPmi',2,'qcCameraRet1350',3,'qcCameraQICam',4,'qcCameraRet1300B',5,'qcCameraRet1350B',6,'qcCameraQICamB',7,'qcCameraMicroPub',8,'qcCameraRetIT',9,'qcCameraQICamIR',10,'qcCameraRochester',11,'qcCameraRet4000R',12,'qcCameraRet2000R',13,'qcCameraRoleraXR',14,'qcCameraRetigaSRV',15,'qcCameraOem3',16,'qcCameraRoleraMGi',17,'qcCameraRet4000RV',18,'qcCameraRet2000RV',19,'qcCameraOem4',20,'qcCameraGo1',21,'qcCameraGo3',22,'qcCameraGo5',23,'qcCameraGo21',24,'qcCameraRoleraEMC2',25,'qcCameraRetigaEXL',26,'qcCameraRoleraXRL',27,'qcCameraRetigaSRVL',28,'qcCameraRetiga4000DC',29,'qcCameraRetiga2000DC',30,'qcCameraEXiBlue',31,'qcCameraEXiGreen',32,'qcCameraRetigaIndigo',33,'qcCameraX',1000,'qcCameraOem1',1001,'qcCameraOem2',1002);
enuminfo.QCam_qcReadoutPort=struct('qcPortNormal',0,'qcPortEM',1,'qcReadoutPort_last',2);
enuminfo.QCam_ParamS32=struct('qprmS32NormalizedGaindB',0,'qprmS32AbsoluteOffset',1,'qprmS32RegulatedCoolingTemp',2,'qprmS32_last',3,'qprmS32_force32',4294967295);
enuminfo.QCam_Info=struct('qinfCameraType',0,'qinfSerialNumber',1,'qinfHardwareVersion',2,'qinfFirmwareVersion',3,'qinfCcd',4,'qinfBitDepth',5,'qinfCooled',6,'qinfReserved1',7,'qinfImageWidth',8,'qinfImageHeight',9,'qinfImageSize',10,'qinfCcdType',11,'qinfCcdWidth',12,'qinfCcdHeight',13,'qinfFirmwareBuild',14,'qinfUniqueId',15,'qinfIsModelB',16,'qinfIntensifierModel',17,'qinfExposureRes',18,'qinfTriggerDelayRes',19,'qinfStreamVersion',20,'qinfNormGainSigFigs',21,'qinfNormGaindBRes',22,'qinfNormITGainSigFigs',23,'qinfNormITGaindBRes',24,'qinfRegulatedCooling',25,'qinfRegulatedCoolingLock',26,'qinfFanControl',29,'qinfHighSensitivityMode',30,'qinfBlackoutMode',31,'qinfPostProcessImageSize',32,'qinfAsymmetricalBinning',33,'qinfEMGain',34,'qinfOpenDelay',35,'qinfCloseDelay',36,'qinfColorWheelSupported',37,'qinfReserved2',38,'qinfReserved3',39,'qinfReserved4',40,'qinfReserved5',41,'qinf_last',42,'qinf_force32',4294967295);
enuminfo.QCam_qcBayerPattern=struct('qcBayerRGGB',0,'qcBayerGRBG',1,'qcBayerGBRG',2,'qcBayerBGGR',3,'qcBayer_last',4);
enuminfo.QCam_Param=struct('qprmGain',0,'qprmOffset',1,'qprmExposure',2,'qprmBinning',3,'qprmHorizontalBinning',4,'qprmVerticalBinning',5,'qprmReadoutSpeed',6,'qprmTriggerType',7,'qprmColorWheel',8,'qprmCoolerActive',9,'qprmExposureRed',10,'qprmExposureBlue',11,'qprmImageFormat',12,'qprmRoiX',13,'qprmRoiY',14,'qprmRoiWidth',15,'qprmRoiHeight',16,'qprmReserved1',17,'qprmShutterState',18,'qprmReserved2',19,'qprmSyncb',20,'qprmReserved3',21,'qprmIntensifierGain',22,'qprmTriggerDelay',23,'qprmCameraMode',24,'qprmNormalizedGain',25,'qprmNormIntensGaindB',26,'qprmDoPostProcessing',27,'qprmPostProcessGainRed',28,'qprmPostProcessGainGreen',29,'qprmPostProcessGainBlue',30,'qprmPostProcessBayerAlgorithm',31,'qprmPostProcessImageFormat',32,'qprmFan',33,'qprmBlackoutMode',34,'qprmHighSensitivityMode',35,'qprmReadoutPort',36,'qprmEMGain',37,'qprmOpenDelay',38,'qprmCloseDelay',39,'qprmCCDClearingMode',40,'qprmOverSample',41,'qprmReserved5',42,'qprmReserved6',43,'qprmReserved7',44,'qprmReserved4',45,'qprmReserved8',46,'qprm_last',47,'qprm_force32',4294967295);
enuminfo.QCam_qcWheelColor=struct('qcWheelRed',0,'qcWheelGreen',1,'qcWheelBlack',2,'qcWheelBlue',3,'qcWheel_last',4);
enuminfo.QCam_qcIntensifierModel=struct('qcItVsStdGenIIIA',0,'qcItVsEbGenIIIA',1,'qcIt_last',2);
enuminfo.QCam_qcCcdType=struct('qcCcdMonochrome',0,'qcCcdColorBayer',1,'qctype_last',2);
enuminfo.QCam_qcCCDClearingModes=struct('qcPreFrameClearing',0,'qcNonClearing',1);
enuminfo.QCam_qcCallbackFlags=struct('qcCallbackDone',1,'qcCallbackExposeDone',2);
enuminfo.QCam_Mode=struct('qmdStandard',0,'qmdRealTimeViewing',1,'qmdOverSample',2,'qmd_last',3,'qmd_force32',4294967295);
enuminfo.QCam_qcReadoutSpeed=struct('qcReadout20M',0,'qcReadout10M',1,'qcReadout5M',2,'qcReadout2M5',3,'qcReadout1M',4,'qcReadout24M',5,'qcReadout48M',6,'qcReadout40M',7,'qcReadout30M',8,'qcReadout_last',9);
enuminfo.QCam_qcCcd=struct('qcCcdKAF1400',0,'qcCcdKAF1600',1,'qcCcdKAF1600L',2,'qcCcdKAF4200',3,'qcCcdICX085AL',4,'qcCcdICX085AK',5,'qcCcdICX285AL',6,'qcCcdICX285AK',7,'qcCcdICX205AL',8,'qcCcdICX205AK',9,'qcCcdICX252AQ',10,'qcCcdS70311006',11,'qcCcdICX282AQ',12,'qcCcdICX407AL',13,'qcCcdS70310908',14,'qcCcdVQE3618L',15,'qcCcdKAI2001gQ',16,'qcCcdKAI2001gN',17,'qcCcdKAI2001MgAR',18,'qcCcdKAI2001CMgAR',19,'qcCcdKAI4020gN',20,'qcCcdKAI4020MgAR',21,'qcCcdKAI4020MgN',22,'qcCcdKAI4020CMgAR',23,'qcCcdKAI1020gN',24,'qcCcdKAI1020MgAR',25,'qcCcdKAI1020MgC',26,'qcCcdKAI1020CMgAR',27,'qcCcdKAI2001MgC',28,'qcCcdKAI2001gAR',29,'qcCcdKAI2001gC',30,'qcCcdKAI2001MgN',31,'qcCcdKAI2001CMgC',32,'qcCcdKAI2001CMgN',33,'qcCcdKAI4020MgC',34,'qcCcdKAI4020gAR',35,'qcCcdKAI4020gQ',36,'qcCcdKAI4020gC',37,'qcCcdKAI4020CMgC',38,'qcCcdKAI4020CMgN',39,'qcCcdKAI1020gAR',40,'qcCcdKAI1020gQ',41,'qcCcdKAI1020gC',42,'qcCcdKAI1020MgN',43,'qcCcdKAI1020CMgC',44,'qcCcdKAI1020CMgN',45,'qcCcdKAI2020MgAR',46,'qcCcdKAI2020MgC',47,'qcCcdKAI2020gAR',48,'qcCcdKAI2020gQ',49,'qcCcdKAI2020gC',50,'qcCcdKAI2020MgN',51,'qcCcdKAI2020gN',52,'qcCcdKAI2020CMgAR',53,'qcCcdKAI2020CMgC',54,'qcCcdKAI2020CMgN',55,'qcCcdKAI2021MgC',56,'qcCcdKAI2021CMgC',57,'qcCcdKAI2021MgAR',58,'qcCcdKAI2021CMgAR',59,'qcCcdKAI2021gAR',60,'qcCcdKAI2021gQ',61,'qcCcdKAI2021gC',62,'qcCcdKAI2021gN',63,'qcCcdKAI2021MgN',64,'qcCcdKAI2021CMgN',65,'qcCcdKAI4021MgC',66,'qcCcdKAI4021CMgC',67,'qcCcdKAI4021MgAR',68,'qcCcdKAI4021CMgAR',69,'qcCcdKAI4021gAR',70,'qcCcdKAI4021gQ',71,'qcCcdKAI4021gC',72,'qcCcdKAI4021gN',73,'qcCcdKAI4021MgN',74,'qcCcdKAI4021CMgN',75,'qcCcdKAF3200M',76,'qcCcdKAF3200ME',77,'qcCcdE2v97B',78,'qcCMOS',79,'qcCcdTX285',80,'qcCcdKAI04022MgC',81,'qcCcdKAI04022CMgC',82,'qcCcdKAI04022MgAR',83,'qcCcdKAI04022CMgAR',83,'qcCcdKAI04022gAR',85,'qcCcdKAI04022gQ',86,'qcCcdKAI04022gC',87,'qcCcdKAI04022gN',88,'qcCcdKAI04022MgN',89,'qcCcdKAI04022CMgN',90,'qcCcd_last',91,'qcCcdX',255);
enuminfo.QCam_qcSyncb=struct('qcSyncbTrigmask',0,'qcSyncbExpose',1,'qcSyncbOem1',0,'qcSyncbOem2',1,'qcSyncb_last',2);
methodinfo=fcns;