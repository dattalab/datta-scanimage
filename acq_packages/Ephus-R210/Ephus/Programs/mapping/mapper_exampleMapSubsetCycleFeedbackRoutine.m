% mapper_exampleMapSubsetCycleFeedbackRoutine - This function shows how to set up a map subset cycle in a feedback loop.
%
% NOTES
%  This function is not intended to run or be used. It merely serves as example for how to set up a rather complex
%  experiment, in what should be a relatively simple fashion.
%
%  It is recommended that you DO NOT edit this file. It may, however, be used as a template for writing a custom
%  implementation. If using as a template, make sure to change the file name, function name, and subfunction name
%  to avoid any possible conflicts.
%
%  Aside from the required data analysis, writing an LSPS feedback loop may now be done in as little as four lines of code.
%
% Created: Timothy O'Connor 3/14/09
% Copyright: Cold Spring Harbor Laboratories/Howard Hughes Medical Institute 2009
function mapper_exampleMapSubsetCycleFeedbackRoutine

%This indicates we will use pixels 1, 5, and 9 of the currently selected map pattern.
%All spatial parameterization is controlled by the Mapper gui in the standard way.
pixelNumbers = [1, 5, 9];

%These are necessary to know where to place files, and if left unspecified, GUIs will pop up prompting the user
%to choose paths/files. Specifying them explicitly is the preferred method of operation, since prompting during the
%feedback loop is undesirable.
pulsePath = 'C:\Data\User1\pulses\MapSubsetCyclePulses';
cycleName = 'MapSubsetCycle01';

%The initial set of parameters may be arbitrary, based on a previous set of maps, or based on other measurements/criteria.
%Here, for the purposes of illustration, they are just arbitrary.
amplitudes = 50;
delay = 0.1;
width = 0.004;
pulseISI = 0.008;
numberOfPulses = 3;
testPulseAmp = 200;
testPulseDelay = 0.38;
testPulseWidth = 0.002;

feedbackLoopPeriod = 30;%Seconds between calls to start acquisitions. The acquisition and data processing must complete within this time.
feedbackLoopIterations = Inf;%Run forever, until explicitly stopped (See mapper_stopMapSubsetCycleFeedbackLoop).

%This is the user-defined callback function, which will get executed after each acquisition.
%This function is responsible for parameterizing the next iteration in the feedback loop.
%
%Here, we create a cell array with a function_handle that points to the subfunction within this file.
%
%We specify two additional arguments that are to be passed to our subfunction. Any set of variables
%may be passed in this way. You may even specify a custom Matlab object as the first argument, to invoke a method of that class.
%
%The callback must also accept two final arguments, that are not specified here. Those arguments
%are defined by other layers of software, and consist of the acquired physiology trace and the corresponding
%buffer name (ie 'trace_1'). These arguments originate with the 'SamplesAcquired' function, and are
%a standard feature of Ephus userFcn programming. See below for the implementation of this callback function.
callback = {@mapper_exampleMapSubsetCycleFeedbackRoutine_callback, pulsePath, cycleName};

%The first time through, we need to start the feedback loop (which is all taken care of behind-the-scenes).
%Due to the "magic" in the invoked function, we only need to choose our initial acquisition parameters here.
mapper_startMapSubsetCycleFeedbackLoop(pixelNumbers, amplitudes, delay, width, pulseISI, numberOfPulses, ...
    testPulseAmp, testPulseDelay, testPulseWidth, ...
    callback, feedbackLoopPeriod, feedbackLoopIterations, ...
    pulsePath, cycleName);

%The preceding command created a series of pulses, made a cycle based upon those pulses, configured a
%user function to handle the analysis and re-parameterization in the loop (see below), and started a
%Matlab timer object to initiate a new cycle periodically.

%To stop the feedback loop, call `mapper_stopMapSubsetCycleFeedbackLoop`.

return;

%-------------------------------------------------------------
%This function needs to take the recorded trace, and calculate the next set of data acquisition parameters for the loop.
%The arguments pixelNumbers, pulsePath and cycleName are all specified above, where this callback is set up. These are
%user-defined arguments, and are only here to demonstrate custom argument passing. They are not required.
%You may add/remove such arguments as you see fit, by changing them both here and in the cell array above.
%
%The data and bufferName arguments are mandatory. These originate from the SamplesAcquired user function, and are supplied
%by Ephys and then passed along to here. You need not act upon them, but you MUST accept them as your final two arguments
%in your callback function.
%The bufferName argument may likely be ignored, however it may be useful for double-patching experiments, in order
%to determine which channel's of data is currently being processed.
%The bufferName variable may be any of 'trace_1', 'trace_2', etc. The numbers correspond to the channel list in
%the Ephys gui.
function mapper_exampleMapSubsetCycleFeedbackRoutine_callback(pixelNumbers, pulsePath, cycleName, data, bufferName)

%Analyze the physiology trace ('data') here.
%Determine the following parameters:
%   amplitudes - The amplitudes for each pixel.
%                May be a vector, of the same length as pixelNumbers, or a scalar.
%   delay - The delay for the shutter/modulator pulse, in seconds.
%           The shutter is forced to be 2ms earlier.
%           May be a vector, of the same length as pixelNumbers, or a scalar.
%   width - The width for the shutter/modulator pulse, in seconds.
%           The shutter is forced to be 2ms longer.
%           May be a vector, of the same length as pixelNumbers, or a scalar.
%   pulseISI - The pulse isi, in seconds.
%              This is not equivalent to the pixel isi (which comes directly from the Mapper).
%              May be a vector, of the same length as pixelNumbers, or a scalar.
%   numberOfPulses - The number of shutter/modulator pulses per pixel.
%                    May be a vector, of the same length as pixelNumbers, or a scalar.
%   testPulseAmp - The amplitude of the ephys test pulse.
%   testPulseDelay - The delay of the ephys test pulse, in seconds.
%   testPulseWidth - The width of the test pulse, in seconds.

%Using the parameters determined above, call mapper_makeMapSubsetCycle.
%This will create the next series of pulses.
mapper_makeMapSubsetCycle(pixelNumbers, amplitudes, delay, width, pulseISI, numberOfPulses, testPulseAmp, testPulseDelay, testPulseWidth, pulsePath, cycleName);

return;